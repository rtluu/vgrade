{"version":3,"sources":["fonts/HelveticaNowDisplay-Regular.ttf","components/Nav/Nav.js","components/Header/Header.js","views/Index/Content.js","components/Footer/Footer.js","views/Index/Index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","React","createElement","className","href","src","Header","Content","class","Footer","Index","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+LAAAA,EAAOC,QAAU,IAA0B,yD,wHCc5BC,MAZf,WACI,OACIC,IAAAC,cAAA,OAAKC,UAAU,OACXF,IAAAC,cAAA,OAAKC,UAAU,YACXF,IAAAC,cAAA,KAAGE,KAAK,KACJH,IAAAC,cAAA,OAAKC,UAAU,OAAOE,IAAI,iCCI/BC,MAPf,WACI,OACIL,IAAAC,cAACF,EAAG,OCqBGO,MAzBf,WACI,OACQN,IAAAC,cAAA,OAAKC,UAAU,WACVF,IAAAC,cAAA,OAAKC,UAAU,YACZF,IAAAC,cAAA,OAAKC,UAAU,aACXF,IAAAC,cAAA,KAAGC,UAAU,YAAW,2CAE5BF,IAAAC,cAAA,OAAKC,UAAU,cACXF,IAAAC,cAAA,KAAGC,UAAU,OAAOC,KAAK,8BAA6BH,IAAAC,cAAA,SAAG,wBACzDD,IAAAC,cAAA,KAAGC,UAAU,cAAa,2DAIlCF,IAAAC,cAAA,OAAKM,MAAM,cACPP,IAAAC,cAAA,KAAGC,UAAU,aAAY,4BACzBF,IAAAC,cAAA,OAAKC,UAAU,eACXF,IAAAC,cAAA,KAAGC,UAAU,eAAcF,IAAAC,cAAA,SAAG,YAC9BD,IAAAC,cAAA,KAAGC,UAAU,eAAcF,IAAAC,cAAA,SAAG,cCPvCO,MAVf,WACI,OACIR,IAAAC,cAAA,UAAQM,MAAM,UACVP,IAAAC,cAAA,OAAKC,UAAU,mBACXF,IAAAC,cAAA,OAAKG,IAAI,iCAAiCF,UAAU,wBCgBrDO,EAbJ,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,OAAAK,YAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,WAUN,OAVMC,YAAAR,EAAA,EAAAS,IAAA,SAAAC,MACP,WACI,OACInB,IAAAC,cAAA,OAAKM,MAAM,kBACPP,IAAAC,cAACI,EAAM,MACPL,IAAAC,cAACK,EAAO,MACRN,IAAAC,cAACO,EAAM,WAIlBC,EAVM,CAASW,aCGLC,MANf,WACE,OACErB,IAAAC,cAACQ,EAAK,OCIUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP5B,IAAAC,cAACD,IAAM6B,WAAU,KACf7B,IAAAC,cAACoB,EAAG,OAENS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c305389.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HelveticaNowDisplay-Regular.9632144b.ttf\";","import React from \"react\"\n\nfunction Nav() {\n    return (\n        <nav className=\"nav\">\n            <div className=\"logo-box\">\n                <a href=\"/\">\n                    <img className=\"logo\" src=\"./images/vgrade-logo.png\"></img>\n                </a>\n            </div>\n        </nav>\n    );\n}\n\nexport default Nav;","import React from \"react\";\n\nimport Nav from \"../Nav/Nav\";\n\nfunction Header() {\n    return (\n        <Nav />\n    );\n\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Content() {\n    return (\n            <div className=\"content\">\n                 <div className=\"hero-box\">\n                    <div className=\"hero-left\">\n                        <p className=\"hero-cta\">make a living from your virtual worlds</p>\n                    </div>\n                    <div className=\"hero-right\">\n                        <a className=\"link\" href=\"mailto:osebosebo@gmail.com\"><p>collaborate with us</p></a>\n                        <p className=\"user-group\">for people who want to monetize their games in Roblox</p>\n                    </div>\n                    \n                </div>\n                <div class=\"footer-box\">\n                    <p className=\"copyright\">Â© vgra.de, inc.  2023</p>\n                    <div className=\"connect-box\">\n                        <a className=\"social-link\"><p>twitter</p></a>\n                        <a className=\"social-link\"><p>email</p></a>\n                    </div>\n                </div>\n            </div>\n           \n    );\n}\n\nexport default Content;","import React from \"react\"\n\nfunction Footer() {\n    return (\n        <footer class=\"footer\">\n            <div className=\"background-fade\">\n                <img src=\"./images/vgrade-background.png\" className=\"background-image\"></img>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React, { Component } from \"react\"\n// import logo from '../../components/Logo/logo.svg';\n\nimport '../../fonts/HelveticaNowDisplay-Regular.ttf';\n\nimport Header from '../../components/Header/Header';\nimport Content from './Content';\nimport Footer from '../../components/Footer/Footer';\n\nclass Index extends Component {\n    render() {\n        return (\n            <div class=\"main-container\">\n                <Header />\n                <Content />\n                <Footer />\n            </div>\n\n        )\n    }\n}\n\nexport default Index;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Index from './views/Index/Index';\n\nfunction App() {\n  return (\n    <Index />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}